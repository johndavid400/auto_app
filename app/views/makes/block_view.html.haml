= render 'shared/model_selector'

.body_container
  - @new_makes.each do |make|
    %div{:class => "block", :id => "#{make.edmunds_id}"}
      %center
        %h5.inline.text-info= make.name
        = link_to "   (x)", "#", :class => "inline", :id => "click_#{make.edmunds_id}"
        :javascript
          $(function() {
            $('#click_#{make.edmunds_id}').click(function() {
              $('##{make.edmunds_id}').hide();     
            });
          });
      %p
      - make.get_models.each do |model|
        %div{:id => "model_#{model.id}"}
          = link_to image_tag(model.sample_image, size: "200x200"), model_years_path(model: model[:edmunds_id], name: model[:name])
          %p
          .inline= model.name
          = link_to "   (x)", "#", :class => "inline", :id => "click_model_#{model.id}"
          %p
          :javascript
            $(function() {
              $('#click_model_#{model.id}').click(function() {
                $('#model_#{model.id}').hide();     
              });
            });

:javascript
  $(function() {
    var hoverElem = null;
    $('body').mousemove(function(e) {
      hoverElem = e.target;
    });

    // This needs to be made a nicer jquery event, as a plugin, that's cross browser.  See http://stackoverflow.com/questions/7154967/jquery-detect-scrolldown
    $(document).bind("mousewheel DOMMouseScroll",function(evt) {
      var delta = evt.originalEvent.wheelDelta || -evt.originalEvent.detail;
      // If my parent is one of the things, do normal stuff
      // Otherwise, do custom stuff and stop event propagation
      if($(hoverElem).hasClass("block") || $(hoverElem).parents(".block")[0]) {
        console.log('normal');
      } else {
        var bc = $('.body_container');
        var curScroll = bc.scrollLeft();
        var scrollDelta = 150;
        if(delta > 0 /* up */){
          console.log('up');
          bc.scrollLeft(curScroll - scrollDelta);
        } else /* down */ {
          console.log('down');
          bc.scrollLeft(curScroll + scrollDelta);
        }
        evt.stopPropagation();
        evt.preventDefault();
        return false;
      }
    });
  });
